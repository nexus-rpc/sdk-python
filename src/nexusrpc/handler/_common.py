from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import (
    Generic,
    Optional,
)

from ._types import OutputT


class HandlerErrorType(Enum):
    """Nexus handler error types.

    See https://github.com/nexus-rpc/api/blob/main/SPEC.md#predefined-handler-errors
    """

    BAD_REQUEST = "BAD_REQUEST"
    UNAUTHENTICATED = "UNAUTHENTICATED"
    UNAUTHORIZED = "UNAUTHORIZED"
    NOT_FOUND = "NOT_FOUND"
    RESOURCE_EXHAUSTED = "RESOURCE_EXHAUSTED"
    INTERNAL = "INTERNAL"
    NOT_IMPLEMENTED = "NOT_IMPLEMENTED"
    UNAVAILABLE = "UNAVAILABLE"
    UPSTREAM_TIMEOUT = "UPSTREAM_TIMEOUT"


class HandlerError(Exception):
    """
    A Nexus handler error.
    """

    __cause__: BaseException

    def __init__(
        self,
        message: str,
        *,
        type: HandlerErrorType,
        cause: BaseException,
        # Whether this error should be considered retryable. If not specified, retry
        # behavior is determined from the error type. For example, INTERNAL is retryable
        # by default unless specified otherwise.
        retryable: Optional[bool] = None,
    ):
        super().__init__(message)
        self.type = type
        self.__cause__ = cause
        self.retryable = retryable


class OperationErrorState(Enum):
    """
    The state of an operation as described by an OperationError.
    """

    FAILED = "failed"
    CANCELED = "canceled"


class OperationError(Exception):
    """
    An error that represents "failed" and "canceled" operation results.
    """

    def __init__(self, message: str, *, state: OperationErrorState):
        super().__init__(message)
        self.state = state


@dataclass
class Link:
    """
    Link contains a URL and a Type that can be used to decode the URL.
    Links can contain any arbitrary information as a percent-encoded URL.
    It can be used to pass information about the caller to the handler, or vice versa.
    """

    # The URL must be percent-encoded.
    url: str
    # Can describe an actual data type for decoding the URL. Valid chars: alphanumeric, '_', '.',
    # '/'
    type: str


@dataclass
class OperationContext:
    """Context for the execution of the requested operation method.

    Includes information from the request."""

    # The name of the service that the operation belongs to.
    service: str
    # The name of the operation.
    operation: str
    # Optional header fields sent by the caller.
    headers: dict[str, str] = field(default_factory=dict)


@dataclass
class StartOperationContext(OperationContext):
    """Context for the start method.

    Includes information from the request."""

    # A callback URL is required to deliver the completion of an async operation. This URL should be
    # called by a handler upon completion if the started operation is async.
    callback_url: Optional[str] = None

    # Optional header fields set by the caller to be attached to the callback request when an
    # asynchronous operation completes.
    callback_header: dict[str, str] = field(default_factory=dict)

    # Request ID that may be used by the server handler to dedupe a start request.
    # By default a v4 UUID will be generated by the client.
    request_id: Optional[str] = None

    # Links received in the request. This list is automatically populated when handling a start
    # request. Handlers may use these links, for example to add information about the
    # caller to a resource associated with the operation execution.
    inbound_links: list[Link] = field(default_factory=list)

    # Links to be returned by the handler. This list is initially empty. Handlers may
    # populate this list, for example with links describing resources associated with the
    # operation execution that may be of use to the caller.
    outbound_links: list[Link] = field(default_factory=list)


@dataclass
class CancelOperationContext(OperationContext):
    """Context for the cancel method.

    Includes information from the request."""


@dataclass
class FetchOperationInfoContext(OperationContext):
    """Context for the fetch_info method.

    Includes information from the request."""


@dataclass
class FetchOperationResultContext(OperationContext):
    """Context for the fetch_result method.

    Includes information from the request."""


class OperationState(Enum):
    """
    Describes the current state of an operation.
    """

    SUCCEEDED = "succeeded"
    FAILED = "failed"
    CANCELED = "canceled"
    RUNNING = "running"


@dataclass
class OperationInfo:
    """
    Information about an operation.
    """

    # Token identifying the operation (returned on operation start).
    token: str

    # The operation's status.
    status: OperationState


# TODO(prelease) Make StartOperationResult an ABC with sync and async helpers?
@dataclass
class StartOperationResultSync(Generic[OutputT]):
    """
    A result returned synchronously by the start method of a nexus operation handler.
    """

    value: OutputT


# TODO(prelease) Make StartOperationResult an ABC with sync and async helpers?
# TODO(prelease) Demonstrate a type-safe fetch_result
@dataclass
class StartOperationResultAsync:
    """
    A value returned by the start method of a nexus operation handler indicating that the
    operation is responding asynchronously.
    """

    token: str
